import java.awt.Point;
import java.util.Random;
import java.util.*;

public class CatMouse_a {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		int n = input.nextInt();
		int s = input.nextInt();
		int t = input.nextInt();
		
		try {
			runRandomSimulation(n,s,t);
		} catch (IllegalArgumentException e) {
			System.out.println("Illegal Parameters !");			
		}
	
	}
	
	public static void runRandomSimulation(int n, int s, int t) {
		
		//A random generator for the mouses steps
		Random direction = new Random();
		
		if(n > 0 && s > 0 && s <= n && t >= 0) {
			
			//The grid is set from 0 to (n-1) as the 0 is also a coordinate
			n = n-1;
			
			Point cat = new Point();
			
			//The mouses position is set to middle, if the situation is .5, it gets rounded upwards.
			Point mouse = new Point((int)Math.ceil(n/2.0),(int)Math.ceil(n/2.0));
			
			System.out.println("n=" + (n+1) + " s=" + s + " t=" + t);
			System.out.print("[" + mouse.x + ";" + mouse.y + "] ");
			System.out.print("[" + cat.x + ";" + cat.y +  "] ");
			System.out.println();
			
		
			
			//The t-number of rounds gets initiated
			for(int i = 1; i <= t; i++) {
				
				//A counter that keep track of the steps taken in x-coordinates
				int catMove = 0;
				
				/* The mouses steps in x-coordinates is set to an random number between -3 to 3.
				 * And then the steps in y-coordinates can only be the reminding steps of s
				 * that isn't taken yet. 
				 */
				int xDirectionMouse = (direction.nextInt(s*2 + 1)-s);
				int sy = (s - Math.abs(xDirectionMouse));
				//The y-coordinates for the mouse are set to random for up or down.
				int yDirectionMouse = direction.nextInt(2);
				
				//The mouse takes it steps.
				
				mouse.x += xDirectionMouse;
				if (yDirectionMouse == 1) {
					mouse.y += sy;
				} else if (yDirectionMouse == 0) {
					mouse.y -= sy;
				}
				
				/* Boundries for the mouse,
				 * if it steps outside of grid it is sent back to the closest grid place.  
				*/
				if (mouse.x < 0) {
					mouse.x = 0;
				}
				if(mouse.x > n) {
					mouse.x = n;
				}
				if(mouse.y < 0) {
					mouse.y = 0;
				}
				if(mouse.y > n) {						
					mouse.y = n;						
				}
				
				//Two variables to hold the difference in x- and y-coordinates.
				int difX = (mouse.x - cat.x);
				int difY = (mouse.y - cat.y);
				
				
				
				//The cat takes it steps.
				
				//Decides whether to step in x-coordinates or y-coordinates.
				if (difX > difY) {
					if (mouse.x != cat.x) {
						
						if(difX <= s && difX > 0) {
							cat.x += difX;
							//The counter only gets positive values.
							catMove += Math.abs(difX);
							
						}else if (difX <= s && difX < 0) {
							cat.x += difX;
							catMove += Math.abs(difX);
						}else if (difX > s && difX < 0) {
							cat.x -= s;
							catMove += s;
						}else {
							cat.x += s;
							catMove += s;
						}
						
					}
					
					if (mouse.y != cat.y && catMove != s) {
						
						if(difY < (s - catMove)) {							
							cat.y += difY;
								
						}else if (difY < 0) {
							cat.y -= (s - catMove) ;
						}else {
							cat.y += (s - catMove);
						}
					}
					
					if (cat.x < 0) {
						cat.x = 0;
					}
					if(cat.x > n) {
						cat.x = n;
					}
					if(cat.y < 0) {
						cat.y = 0;
					}
					if(cat.y > n) {						
						cat.y = n;						
					}						
					
				 //The same step-code here, if chosen to go in y-coordinates first.	
				}else {
					if (mouse.y != cat.y) {
						
						if(difY <= s && difY > 0) {
							cat.y += difY;
							catMove += Math.abs(difY);
							
						}else if (difY < s && difY < 0) {
							cat.y += difY;
							catMove += Math.abs(difY);
						}else if (difY > s && difY < 0) {
							cat.y -= s;
							catMove += s;
						}else {
							cat.y += s;
							catMove += s;
						}
						
					}
					
					if (mouse.x != cat.x && catMove != s) {
						
						if(difX < (s - catMove)) {							
							cat.x += difX;
								
						}else if (difX < 0) {
							cat.x -= (s - catMove) ;
						}else {
							cat.x += (s - catMove);
						}
					}
					
					if (cat.x < 0) {
						cat.x = 0;
					}
					if(cat.x > n) {
						cat.x = n;
					}
					if(cat.y < 0) {
						cat.y = 0;
					}
					if(cat.y > n) {						
						cat.y = n;						
					}
				}
									
				System.out.print("[" + mouse.x + ";" + mouse.y + "] ");
				System.out.print("[" + cat.x + ";" + cat.y +  "]");
				System.out.println();
				
				if (mouse.x == cat.x && mouse.y == cat.y) {
					System.out.print("Catch!");	
					break;
				}					
				
			}

		} else {
			throw new IllegalArgumentException();
		}

	}
	
}
